//****************************************************************************
// Model: game.qm
// File:  ./missile.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
// @(/4/1) ...................................................................
#include "qp_port.h"
#include "bsp.h"
#include "game.h"

namespace GAME {

//Q_DEFINE_THIS_FILE

// local objects -------------------------------------------------------------
namespace GAME {

// @(/3/2) ...................................................................
class Missile : public QP::QMActive {
private:
    uint8_t m_x;
    uint8_t m_y;
    uint8_t m_exp_ctr;

public:
    Missile();

protected:
    static QP::QState initial(Missile * const me, QP::QEvt const * const e);
    static QP::QState armed  (Missile * const me, QP::QEvt const * const e);
    static QP::QMState const armed_s;
    static QP::QState flying  (Missile * const me, QP::QEvt const * const e);
    static QP::QMState const flying_s;
    static QP::QState exploding  (Missile * const me, QP::QEvt const * const e);
    static QP::QState exploding_e(Missile * const me);
    static QP::QMState const exploding_s;
};

} // namespace GAME
static Missile l_missile;    // the sole instance of the Missile active object

// Public-scope objects ------------------------------------------------------
QP::QActive * const AO_Missile = &l_missile;                 // opaque pointer

// Active object definition --------------------------------------------------
namespace GAME {

// @(/3/2) ...................................................................
// @(/3/2/3) .................................................................
Missile::Missile()
  : QMActive(Q_STATE_CAST(&Missile::initial))
{}

// @(/3/2/4) .................................................................
// @(/3/2/4/0)
QP::QState Missile::initial(Missile * const me, QP::QEvt const * const e) {
    me->subscribe( TIME_TICK_SIG);

    QS_OBJ_DICTIONARY(&l_missile);  // object dictionary for Missile object

    QS_FUN_DICTIONARY(&Missile::initial); // dictionaries for Missile HSM
    QS_FUN_DICTIONARY(&Missile::armed);
    QS_FUN_DICTIONARY(&Missile::flying);
    QS_FUN_DICTIONARY(&Missile::exploding);

    QS_SIG_DICTIONARY(MISSILE_FIRE_SIG,   &l_missile);     // local signals
    QS_SIG_DICTIONARY(HIT_WALL_SIG,       &l_missile);
    QS_SIG_DICTIONARY(DESTROYED_MINE_SIG, &l_missile);
    return QM_INITIAL(&Missile::armed_s, QP::QMsm::s_emptyAction_);
}
// @(/3/2/4/1) ...............................................................
QP::QMState const Missile::armed_s = {
    static_cast<QP::QMState const *>(0),
    Q_STATE_CAST(&Missile::armed),
    Q_ACTION_CAST(0)
};
QP::QState Missile::armed(Missile * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // @(/3/2/4/1/0)
        case MISSILE_FIRE_SIG: {
            me->m_x = Q_EVT_CAST(ObjectPosEvt)->x;
            me->m_y = Q_EVT_CAST(ObjectPosEvt)->y;
            status_ = QM_TRAN(&flying_s, QP::QMsm::s_emptyAction_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
// @(/3/2/4/2) ...............................................................
QP::QMState const Missile::flying_s = {
    static_cast<QP::QMState const *>(0),
    Q_STATE_CAST(&Missile::flying),
    Q_ACTION_CAST(0)
};
QP::QState Missile::flying(Missile * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // @(/3/2/4/2/0)
        case TIME_TICK_SIG: {
            // @(/3/2/4/2/0/0)
            if (me->m_x + GAME_MISSILE_SPEED_X < GAME_SCREEN_WIDTH) {
                me->m_x += GAME_MISSILE_SPEED_X;
                // tell the Tunnel to draw the Missile and test for wall hits
                ObjectImageEvt *oie = Q_NEW(ObjectImageEvt, MISSILE_IMG_SIG);
                oie->x   = me->m_x;
                oie->y   = me->m_y;
                oie->bmp = MISSILE_BMP;
                AO_Tunnel->POST(oie, me);
                status_ = QM_HANDLED();
            }
            // @(/3/2/4/2/0/1)
            else {
                status_ = QM_TRAN(&armed_s, QP::QMsm::s_emptyAction_);
            }
            break;
        }
        // @(/3/2/4/2/1)
        case HIT_WALL_SIG: {
            static QP::QActionHandler const act_[] = {
                Q_ACTION_CAST(&Missile::exploding_e),
                Q_ACTION_CAST(0)
            };
            status_ = QM_TRAN(&exploding_s, act_);
            break;
        }
        // @(/3/2/4/2/2)
        case DESTROYED_MINE_SIG: {
            AO_Ship->POST(e, me);
            status_ = QM_TRAN(&armed_s, QP::QMsm::s_emptyAction_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
// @(/3/2/4/3) ...............................................................
QP::QMState const Missile::exploding_s = {
    static_cast<QP::QMState const *>(0),
    Q_STATE_CAST(&Missile::exploding),
    Q_ACTION_CAST(0)
};
QP::QState Missile::exploding_e(Missile * const me) {
    me->m_exp_ctr = 0U;
    return QM_ENTRY(&exploding_s);
}
QP::QState Missile::exploding(Missile * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // @(/3/2/4/3/0)
        case TIME_TICK_SIG: {
            // @(/3/2/4/3/0/0)
            if ((me->m_x >= GAME_SPEED_X) && (me->m_exp_ctr < 15U)) {
                ++me->m_exp_ctr;           // advance the explosion counter
                me->m_x -= GAME_SPEED_X;   // move the explosion by one step

                // tell the Tunnel to render the current stage of Explosion
                ObjectImageEvt *oie = Q_NEW(ObjectImageEvt, EXPLOSION_SIG);
                oie->x   = me->m_x + 3U;   // x-pos of explosion
                oie->y   = (int8_t)((int)me->m_y - 4U); // y-pos
                oie->bmp = EXPLOSION0_BMP + (me->m_exp_ctr >> 2);
                AO_Tunnel->POST(oie, me);
                status_ = QM_HANDLED();
            }
            // @(/3/2/4/3/0/1)
            else {
                status_ = QM_TRAN(&armed_s, QP::QMsm::s_emptyAction_);
            }
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}

} // namespace GAME

} // namespace GAME
